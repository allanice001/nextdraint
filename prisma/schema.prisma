datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma/client"
}

// User model for authentication and profile information
model User {
  id            String       @id @default(uuid()) @db.Uuid
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?      @db.Text
  website       String?
  location      String?
  role          Role         @default(OWNER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  artworks      Artwork[]
  collections   Collection[]
  favorites     Favorite[]
  comments      Comment[]
  orders        Order[]
  likes         Like[]
  followers     Follow[]     @relation("Following")
  following     Follow[]     @relation("Follower")
}

enum Role {
  OWNER
  ADMIN
  USER
  MASTER
}

// NextAuth models
model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Artwork model
model Artwork {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  description String?    @db.Text
  image       String
  likesCount  Int        @default(0)
  price       Decimal    @db.Decimal(10, 2)
  currency    Currencies @default(EUR)
  weight      Int?
  height      Int?
  width       Int?
  thickness   Int?
  duration    BigInt?
  completed   BigInt?
  sold        Boolean    @default(false)
  medium_id   String     @db.Uuid
  surface_id  String     @db.Uuid
  style_id    String     @db.Uuid
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String     @db.Uuid

  // Relations
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  Category[]
  tags        Tag[]
  favorites   Favorite[]
  comments    Comment[]
  collections CollectionArtwork[]
  medium      Mediums             @relation(fields: [medium_id], references: [id], onDelete: Cascade)
  surface     Surfaces            @relation(fields: [surface_id], references: [id], onDelete: Cascade)
  style       Styles              @relation(fields: [style_id], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  Like        Like[]
}

enum Currencies {
  EUR
  USD
  GBP
}

model Mediums {
  id        String    @id @default(uuid()) @db.Uuid
  medium    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Artwork   Artwork[]
}

model Styles {
  id        String    @id @default(uuid()) @db.Uuid
  style     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Artwork   Artwork[]
}

model Surfaces {
  id        String    @id @default(uuid()) @db.Uuid
  surface   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Artwork   Artwork[]
}

// Category model for artwork categorization
model Category {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artworks Artwork[]
}

// Tag model for artwork tagging
model Tag {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artworks Artwork[]
}

// Collection model for user collections
model Collection {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?  @db.Text
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.Uuid

  // Relations
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  artworks CollectionArtwork[]
}

// Join table for collections and artworks
model CollectionArtwork {
  id           String   @id @default(uuid()) @db.Uuid
  collectionId String   @db.Uuid
  artworkId    String   @db.Uuid
  createdAt    DateTime @default(now())

  // Relations
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  artwork    Artwork    @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@unique([collectionId, artworkId])
}

// Favorite model for user favorites
model Favorite {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  artworkId String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@unique([userId, artworkId])
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  artworkId String  @db.Uuid
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
}

model Like {
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artworkId String   @db.Uuid
  artwork   Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, artworkId])
  @@unique([userId, artworkId])
}

model Follow {
  followerId  String   @db.Uuid
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String   @db.Uuid
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
}

// Order model for purchases
model Order {
  id        String      @id @default(uuid()) @db.Uuid
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String      @db.Uuid

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
  CANCELLED
}

// OrderItem model for order items
model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  orderId   String   @db.Uuid
  artworkId String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  artwork Artwork @relation(fields: [artworkId], references: [id])
}

model HomepageSliders {
  id            String             @id @default(uuid()) @db.Uuid
  title         String
  primary_image String
  url           String
  button        String
  author        String
  name          String
  is_active     Boolean            @default(false)
  small_image   String
  artwork_id    String
  show_for_role HomepageSliderRole @default(UNAUTHORIZED)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

enum HomepageSliderRole {
  COLLECTOR
  ARTIST
  UNAUTHORIZED
}
