datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model for authentication and profile information
model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?      @db.Text
  website       String?
  location      String?
  role          Role         @default(OWNER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  artworks      Artwork[]
  collections   Collection[]
  favorites     Favorite[]
  comments      Comment[]
  orders        Order[]
}

enum Role {
  OWNER
  ADMIN
  USER
  MASTER
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Artwork model
model Artwork {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  image       String
  price       Decimal  @db.Decimal(10, 2)
  currency    String   @default("ETH")
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  Category[]
  tags        Tag[]
  favorites   Favorite[]
  comments    Comment[]
  collections CollectionArtwork[]
  orderItems  OrderItem[]
}

// Category model for artwork categorization
model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artworks Artwork[]
}

// Tag model for artwork tagging
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artworks Artwork[]
}

// Collection model for user collections
model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  artworks CollectionArtwork[]
}

// Join table for collections and artworks
model CollectionArtwork {
  id           String   @id @default(cuid())
  collectionId String
  artworkId    String
  createdAt    DateTime @default(now())

  // Relations
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  artwork    Artwork    @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@unique([collectionId, artworkId])
}

// Favorite model for user favorites
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  artworkId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@unique([userId, artworkId])
}

// Comment model for artwork comments
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  artworkId String

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
}

// Order model for purchases
model Order {
  id        String      @id @default(cuid())
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
  CANCELLED
}

// OrderItem model for order items
model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  orderId   String
  artworkId String

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  artwork Artwork @relation(fields: [artworkId], references: [id])
}

model HomepageSliders {
  id            String             @id @default(cuid())
  title         String
  primary_image String
  url           String
  button        String
  author        String
  name          String
  is_active     Boolean            @default(false)
  small_image   String
  artwork_id    String
  show_for_role HomepageSliderRole @default(UNAUTHORIZED)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

enum HomepageSliderRole {
  COLLECTOR
  ARTIST
  UNAUTHORIZED
}
